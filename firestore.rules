/**
 * @file Firebase Security Rules for LoanLook application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and allows open read access to loan data, but only allows authenticated users to create, update, or delete loans.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, with the 'userId' matching the Firebase Auth 'uid'.
 * - Loan records are stored in the `/loans/{loanId}` collection.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the authenticated user.
 * - Loan data is publicly readable, but write access requires authentication.
 *
 * Denormalization for Authorization:
 * - No denormalization is required in this ruleset.
 *
 * Structural Segregation:
 * - User profiles and loan data are stored in separate collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles under /users/{userId}.
     * @path /users/{userId}
     * @allow (create) - An authenticated user can create their own profile.
     * @allow (get, list) - An authenticated user can read their own profile.
     * @allow (update, delete) - An authenticated user can update or delete their own profile.
     * @deny (create) - A user cannot create a profile with a different user ID.
     * @deny (get, list) - A user cannot read another user's profile.
     * @deny (update, delete) - A user cannot modify or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // isSignedIn() checks if the request has valid authentication credentials
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Loan data is publicly readable, but write access requires authentication.
     * @path /loans/{loanId}
     * @allow (get, list) - Anyone can read loan data.
     * @allow (create) - Only authenticated users can create loans.
     * @allow (update, delete) - Only authenticated users can update or delete loans.
     * @deny (create) - Non-authenticated users cannot create loans.
     * @deny (update, delete) - Non-authenticated users cannot update or delete loans.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /loans/{loanId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // ---- Helper functions ----
    // isSignedIn() returns true if the request is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // isOwner(userId) returns true if the user ID matches the authenticated user's ID.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // isExistingOwner(userId) returns true if the user ID matches the authenticated user's ID and the resource exists.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}